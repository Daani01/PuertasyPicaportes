using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.UI;
using static FirstPersonController;

[RequireComponent(typeof(PlayerInput), typeof(CharacterController))]
public class FirstPersonController : MonoBehaviour
{

    [SerializeField] private GameObject pauseMenuUI; // Referencia al panel del menú de pausa
    private bool isPaused = false;

    private PlayerInput playerInput;
    private PlayerAutoGenerated playerInputActions;
    
    [Header("Canvas Manager")]
    [SerializeField] private ObjectCanvasManager canvasManager;
    [SerializeField] private GameLoop gameloopManager;

    [Header("HUD")]
    [SerializeField] private Image StateImage;
    [SerializeField] private Sprite CrouchingSprite;
    [SerializeField] private Sprite HidingSprite;
    [SerializeField] private Sprite BlockSprite;
    [SerializeField] private Sprite DeadSprite;

    [SerializeField] private Image AlertImage;
    [SerializeField] private int RepetitionAlert;
    [SerializeField] private float MaxDurationAlert;
    [SerializeField] private Image healthImage;
    [SerializeField] private Text healthText;
    [SerializeField] private TMP_Text coinsCountText;
    [SerializeField] private Image interactedImage;
    [SerializeField] private Image interactedObjImage;


    [SerializeField] private Image damageIndicator;
    private float fadeDuration = 3f; // Duración total para desvanecer el efecto
    private float maxAlphaIncrease = 0.1f; // Aumenta el alpha en 30 puntos (0.3 en escala 0-1)
    private Coroutine fadeDamageIndicatorCoroutine;

    [SerializeField] private TMP_Text helpText; // Asigna un TextMeshPro en el inspector
    private Coroutine fadeTextInfoCoroutine; // Para manejar la corrutina


    private Dictionary<PlayerState, Sprite> stateSprites;

    [Header("Movement Settings")]
    [SerializeField] private float walkSpeed;
    [SerializeField] private float runSpeed;
    [SerializeField] private float crouchSpeed;
    [SerializeField] private float crouchHeight;
    [SerializeField] private float normalHeight;
    [SerializeField] private float gravity;
    [SerializeField] private float jumpHeight;

    [Header("Player Health Settings")]
    [SerializeField] public float maxHealth = 100f;
    [SerializeField] public float currentHealth;

    [Header("Money Settings")]
    [SerializeField] public int coinsCount;

    [Header("Look Settings")]
    [SerializeField] private float mouseSensitivity;
    [SerializeField] private float maxVerticalAngle;
    [SerializeField] private float minVerticalAngle;
    [SerializeField] private float rotationSmoothness;
    [SerializeField] private Camera playerCamera;
    [SerializeField] private float interactRange;
    [SerializeField] private LayerMask interactableLayer;


    [Header("State Control")]
    [SerializeField] private bool canJump;
    [SerializeField] private bool canRun;
    [SerializeField] private bool canCrouch;
    [SerializeField] public bool blockPlayer;
    [SerializeField] private List<IUsable> inventory = new List<IUsable>();
    [SerializeField] private IUsable selectedObject;
    [SerializeField] private Transform ObjectsTransform;
    [SerializeField] private Transform ObjectsLookAtTransform;

    [Header("Screech")]
    [SerializeField] public float playerRadius;

    private CharacterController controller;
    public Vector2 moveInput;
    public Vector2 lookInput;
    private Vector2 currentRotation;
    private Vector2 targetRotation;
    private Vector2 rotationVelocity;
    private float currentSpeed;
    private Vector3 velocity;
    private bool isPillEffectActive = false; // Nuevo booleano para controlar el efecto de la píldora
    private Coroutine pillEffectCoroutine; // Guarda la referencia de la corrutina de la píldora

    private Transform allRooms;

    public enum PlayerState
    {
        Waiting,
        Walking,
        Running,
        Crouching,
        Hiding,
        Block,
        Dead
    }

    [SerializeField] public PlayerState currentState;
    private PlayerState StateBeforePause;


    private void Awake()
    {

        currentState = PlayerState.Block;

        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;

            playerInput = GetComponent<PlayerInput>();
        playerInputActions = new PlayerAutoGenerated();

        playerInputActions.Enable();

        playerInputActions.Player.Move.performed += ctx => moveInput = ctx.ReadValue<Vector2>();
        playerInputActions.Player.Move.canceled += ctx => moveInput = Vector2.zero;

        playerInputActions.Player.Look.performed += ctx => lookInput = ctx.ReadValue<Vector2>();
        playerInputActions.Player.Look.canceled += ctx => lookInput = Vector2.zero;

        playerInputActions.Player.Run.started += ctx => StartRunning();
        playerInputActions.Player.Run.canceled += ctx => StopRunning();

        playerInputActions.Player.Crouch.started += ctx => ToggleCrouch();
        playerInputActions.Player.Jump.started += ctx => Jump();

        playerInputActions.Player.Interact.started += ctx => Interact();

        playerInputActions.Player.SelectObj1.started += ctx => SelectObj(1);
        playerInputActions.Player.SelectObj2.started += ctx => SelectObj(2);
        playerInputActions.Player.SelectObj3.started += ctx => SelectObj(3);

        playerInputActions.Player.ActivateObj.started += ctx => ActivateObj();

        playerInputActions.Player.Pause.started += ctx => TogglePause();



        // Asignar componentes que pueden no haberse asignado directamente
        if (canvasManager == null)
            canvasManager = GameObject.Find("UI_Canvas_Manager").GetComponent<ObjectCanvasManager>();

        if (gameloopManager == null)
            gameloopManager = GameObject.Find("GAMELOOP").GetComponent<GameLoop>();


        if (StateImage == null)
            StateImage = GameObject.Find("State_Image").GetComponent<Image>();

        if (AlertImage == null)
            AlertImage = GameObject.Find("INFO_Enemy").GetComponent<Image>();

        if (healthImage == null)
            healthImage = GameObject.Find("INFO_Health").GetComponent<Image>();

        if (healthText == null)
            healthText = GameObject.Find("INFO_Text_Health").GetComponent<Text>();

        if (helpText == null)
            helpText = GameObject.Find("Help_Text").GetComponent<TMP_Text>();

        if (damageIndicator == null)
            damageIndicator = GameObject.Find("Damage_Indicator").GetComponent<Image>();

        if (coinsCountText == null)
            coinsCountText = GameObject.Find("Coins_Count").GetComponent<TMP_Text>();

        if(allRooms == null)
            allRooms = GameObject.Find("ALLROOMS").GetComponent<Transform>();

        transform.SetParent(allRooms);


        GameObject playerSpawnPointObject = GameObject.Find("PlayerSpawnPoint");
        if (playerSpawnPointObject != null)
        {
            Transform playerSpawnPoint = playerSpawnPointObject.transform;
            this.transform.position = playerSpawnPoint.position;
        }


        var data = SaveSystem.LoadPlayerData();

        if(data != null)
        {
            coinsCount = data.coins;
        }


        coinsCountText.text = coinsCount.ToString();



        if (interactedImage == null)
            interactedImage = GameObject.Find("Interacted_Image").GetComponent<Image>();

        if (interactedObjImage == null)
            interactedObjImage = GameObject.Find("Interacted_Obj_Image").GetComponent<Image>();

        if (pauseMenuUI == null)
        {
            Canvas canvas = FindObjectOfType<Canvas>();
            if (canvas != null)
            {
                pauseMenuUI = canvas.transform.Find("Pause_Info")?.gameObject;
            }

            if (pauseMenuUI == null)
            {
                Debug.LogWarning("PauseMenuUI no encontrado en el Canvas.");
            }
        }


        controller = GetComponent<CharacterController>();
        ObjectsTransform = GameObject.Find("OBJECT_PLACEMENT").transform;
        ObjectsLookAtTransform = GameObject.Find("OBJECT_LOOKAT").transform;

        controller.enabled = false;
        controller.enabled = true;

        // Inicializar otras variables
        currentHealth = maxHealth;
        stateSprites = new Dictionary<PlayerState, Sprite>
        {
            { PlayerState.Crouching, CrouchingSprite },
            { PlayerState.Hiding, HidingSprite },
            { PlayerState.Block, BlockSprite },
            { PlayerState.Dead, DeadSprite }
        };
    }


    public void DisableInputs()
    {        
        playerInput.DeactivateInput();
        playerInputActions.Disable();
        //Debug.Log("INPUT DESACTIVADO");
        //Destroy(gameObject);
    }


    private void TogglePause()
    {
        isPaused = !isPaused;

        if (isPaused)
        {
            PauseGame();
        }
        else
        {
            ResumeGame();
        }
    }

    private void PauseGame()
    {
        StateBeforePause = currentState;
        blockPlayer = true;
        //ChangePlayerState(currentState);
        playerInput.DeactivateInput();
        //playerInputActions.Disable();

        Time.timeScale = 0f; // Pausa el juego
        pauseMenuUI.SetActive(true); // Muestra el menú
        Cursor.lockState = CursorLockMode.None; // Desbloquea el cursor
        Cursor.visible = true;
    }

    public void ResumeGame()
    {
        isPaused = false;
        blockPlayer = false;
        currentState = StateBeforePause;
        ChangePlayerState(currentState);

        playerInput.ActivateInput();

        //playerInputActions.Enable();

        Time.timeScale = 1f; // Reanuda el juego
        pauseMenuUI.SetActive(false); // Oculta el menú
        Cursor.lockState = CursorLockMode.Locked; // Bloquea el cursor
        Cursor.visible = false;
    }



    private void Update()
    {
        if (!blockPlayer && currentState != PlayerState.Block && currentState != PlayerState.Dead)
        {
            Move();
            Look();
            RotatePlayer();
            CheckInteractImage();
        }
        
        BlockPlayer();        
        ApplyGravity();
    }

    // Movement-related methods

    /*
    private void Move()
    {
        //allRooms

        if (currentState == PlayerState.Dead || currentState == PlayerState.Block || currentState == PlayerState.Hiding)
        {
            currentSpeed = 0f;
            return;
        }

        if (moveInput == Vector2.zero && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Waiting);
            currentSpeed = 0f;
            return;
        }

        if (isPillEffectActive && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Running);
        }
        else if (!isPillEffectActive && moveInput != Vector2.zero && currentState != PlayerState.Running && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Walking);
        }

        float targetSpeed = currentState == PlayerState.Running ? runSpeed :
                            (currentState == PlayerState.Crouching ? crouchSpeed : walkSpeed);
        currentSpeed = Mathf.Lerp(currentSpeed, targetSpeed, Time.deltaTime * 10f);

        Vector3 moveDirection = transform.TransformDirection(new Vector3(moveInput.x, 0f, moveInput.y));
        controller.Move(moveDirection * currentSpeed * Time.deltaTime);

    }
    */

    private void Move()
    {
        if (currentState == PlayerState.Dead || currentState == PlayerState.Block || currentState == PlayerState.Hiding)
        {
            currentSpeed = 0f;
            return;
        }

        if (moveInput == Vector2.zero && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Waiting);
            currentSpeed = 0f;
            return;
        }

        if (isPillEffectActive && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Running);
        }
        else if (!isPillEffectActive && moveInput != Vector2.zero && currentState != PlayerState.Running && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Walking);
        }

        float targetSpeed = currentState == PlayerState.Running ? runSpeed :
                            (currentState == PlayerState.Crouching ? crouchSpeed : walkSpeed);
        currentSpeed = Mathf.Lerp(currentSpeed, targetSpeed, Time.deltaTime * 10f);

        Vector3 moveDirection = transform.TransformDirection(new Vector3(moveInput.x, 0f, moveInput.y));

        //funciona
        allRooms.position -= moveDirection * currentSpeed * Time.deltaTime;
    }


    /*
    private void Move()
    {
        if (currentState == PlayerState.Dead || currentState == PlayerState.Block || currentState == PlayerState.Hiding)
        {
            currentSpeed = 0f;
            return;
        }

        if (moveInput == Vector2.zero && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Waiting);
            currentSpeed = 0f;
            return;
        }

        if (isPillEffectActive && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Running);
        }
        else if (!isPillEffectActive && moveInput != Vector2.zero && currentState != PlayerState.Running && currentState != PlayerState.Crouching)
        {
            ChangePlayerState(PlayerState.Walking);
        }

        float targetSpeed = currentState == PlayerState.Running ? runSpeed :
                            (currentState == PlayerState.Crouching ? crouchSpeed : walkSpeed);
        currentSpeed = Mathf.Lerp(currentSpeed, targetSpeed, Time.deltaTime * 10f);

        Vector3 moveDirection = transform.TransformDirection(new Vector3(moveInput.x, 0f, moveInput.y));

        if (!IsNearWall(moveDirection))
        {
            if (allRooms != null)
            {
                allRooms.transform.position -= moveDirection * currentSpeed * Time.deltaTime;
            }
        }
        else
        {
            currentSpeed = 0f;
        }
    }
    
    private bool IsNearWall(Vector3 direction)
    {
        float rayDistance = 0.6f; // Ajustar si es necesario
        Vector3 rayStart = transform.position + Vector3.up * 1.0f; // Evitar el suelo
        int wallLayer = LayerMask.GetMask("Forniture", "Interact"); // Asegúrate de que la capa "Wall" existe en Unity

        // Direcciones en las que disparamos los Raycasts (diagonal incluida)
        Vector3[] directions = new Vector3[]
        {
        direction,                                        // Dirección principal
        new Vector3(direction.x, 0f, 0f),                // Lateral (X)
        new Vector3(0f, 0f, direction.z),                // Frontal/trasera (Z)
        new Vector3(direction.x, 0f, direction.z).normalized // Diagonal
        };

        foreach (Vector3 dir in directions)
        {
            Debug.DrawRay(rayStart, dir * rayDistance, Color.red, 0.1f);

            if (Physics.Raycast(rayStart, dir, out RaycastHit hit, rayDistance, wallLayer))
            {
                return true;
            }
        }

        return false;
    }
    */



    private void ApplyGravity()
    {
        if (controller.isGrounded && velocity.y < 0)
        {
            velocity.y = -2f;
        }
        velocity.y += gravity * Time.deltaTime;
        controller.Move(velocity * Time.deltaTime);
    }

    private void Jump()
    {
        if (canJump && controller.isGrounded && currentState != PlayerState.Hiding && currentState != PlayerState.Crouching && currentState != PlayerState.Block)
        {
            velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);
        }
    }

    // Player State Management
    private void StartRunning()
    {
        if (canRun && currentState != PlayerState.Crouching && currentState != PlayerState.Block)
        {
            ChangePlayerState(PlayerState.Running);
        }
    }

    private void StopRunning()
    {
        if (canRun && currentState != PlayerState.Crouching && currentState != PlayerState.Block)
        {
            ChangePlayerState(PlayerState.Walking);
        }
    }

    public void ActivatePillEffect(float duration)
    {
        // Si la corrutina ya está activa, la detenemos para reiniciar el temporizador
        if (pillEffectCoroutine != null)
        {
            StopCoroutine(pillEffectCoroutine);
        }

        pillEffectCoroutine = StartCoroutine(PillEffectCoroutine(duration));
    }

    // Corrutina para el efecto de la píldora
    private IEnumerator PillEffectCoroutine(float duration)
    {
        isPillEffectActive = true;

        yield return new WaitForSeconds(duration);

        isPillEffectActive = false;
        ChangePlayerState(PlayerState.Walking); // Vuelve al estado Walking una vez termina el efecto
        pillEffectCoroutine = null; // Resetea la referencia de la corrutina
    }

    private void ToggleCrouch()
    {
        if (canCrouch && currentState != PlayerState.Block && currentState != PlayerState.Hiding)
        {
            if (currentState == PlayerState.Crouching)
            {
                controller.height = normalHeight;
                ChangePlayerState(PlayerState.Walking);
            }
            else
            {
                controller.height = crouchHeight;
                ChangePlayerState(PlayerState.Crouching);
            }
        }
    }

    private void BlockPlayer()
    {
        if (blockPlayer)
        {
            ChangePlayerState(PlayerState.Block);
        }
        else if (currentState == PlayerState.Block)
        {
            ChangePlayerState(PlayerState.Waiting);
        }
    }

    public void EnterHiding(Vector3 insidePosition)
    {
        //Debug.Log("EnterHiding called with position: " + insidePosition);
        ChangePlayerState(PlayerState.Hiding);
        if (selectedObject != null)
        {
            selectedObject.DesActivate();
            selectedObject = null;
        }
        controller.height = normalHeight;
        TeleportToPosition(insidePosition);
    }

    public void ExitHiding(Vector3 outsidePosition)
    {
        //Debug.Log("ExitHiding called with position: " + outsidePosition);
        ChangePlayerState(PlayerState.Walking);
        TeleportToPosition(outsidePosition);
    }


    private void TeleportToPosition(Vector3 targetPosition)
    {
        controller.enabled = false; // Desactiva el CharacterController
        transform.position = targetPosition;
        controller.enabled = true; // Activa el CharacterController
    }


    // Interaction methods
    /*
    private void Interact()
    {
        if (currentState != PlayerState.Block && currentState != PlayerState.Dead)
        {
            Ray ray = new Ray(playerCamera.transform.position, playerCamera.transform.forward);
            RaycastHit hit;

            if (Physics.Raycast(ray, out hit, interactRange, interactableLayer))
            {
                IUsable usable = hit.collider.GetComponent<IUsable>();
                IInteractable interactable = hit.collider.GetComponent<IInteractable>();

                if (interactable != null)
                {
                    interactable.InteractObj();
                }

                if (usable != null && CheckPickUpItem(usable))
                {
                    PickUpItem(usable);
                    usable.GetObjPlayer(ObjectsTransform, ObjectsLookAtTransform);
                }
            }
        }
    }
    */

    private void Interact()
    {
        if (currentState == PlayerState.Block || currentState == PlayerState.Dead)
            return;

        Ray ray = new Ray(playerCamera.transform.position, playerCamera.transform.forward);
        if (Physics.Raycast(ray, out RaycastHit hit, interactRange, interactableLayer))
        {
            // Primero, verificamos si es interactuable
            IInteractable interactable = hit.collider.GetComponent<IInteractable>();
            if (interactable != null)
            {
                interactable.InteractObj();
            }

            // Luego, verificamos si es usable
            IUsable usable = hit.collider.GetComponent<IUsable>();
            if (usable != null && CheckPickUpItem(usable))
            {
                PickUpItem(usable);
                usable.GetObjPlayer(ObjectsTransform, ObjectsLookAtTransform);
            }
        }
    }


    private void CheckInteractImage()
{
    if (currentState != PlayerState.Block && currentState != PlayerState.Dead)
    {
        Ray ray = new Ray(playerCamera.transform.position, playerCamera.transform.forward);
        RaycastHit hit;

        if (Physics.Raycast(ray, out hit, interactRange, interactableLayer))
        {
            IInteractable interactable = hit.collider.GetComponent<IInteractable>();
            IUsable usable = hit.collider.GetComponent<IUsable>();

            // Cambiar el alpha de la imagen según si el objeto es interactuable o usable
            SetImageAlpha(interactedImage, interactable != null ? 1f : 0f);
            SetImageAlpha(interactedObjImage, usable != null ? 1f : 0f);
        }
        else
        {
            // Si no se detecta nada, hacer invisibles ambas imágenes
            SetImageAlpha(interactedImage, 0f);
            SetImageAlpha(interactedObjImage, 0f);
        }
    }
}

// Función auxiliar para cambiar la transparencia de una imagen
private void SetImageAlpha(Image image, float alpha)
{
    if (image != null)
    {
        Color color = image.color;
        color.a = alpha;
        image.color = color;
    }
}



// Inventory and item selection methods
private bool CheckPickUpItem(IUsable usableItem)
    {
        foreach (var item in inventory)
        {
            if (item.GetType() == usableItem.GetType())
            {
                ShowMessage("Objeto en tu inventario", 4f);
                return false;
            }
        }
        return true;
    }

    public void PickUpItem(IUsable usableItem)
    {
        if (inventory.Count < 6)
        {
            ShowMessage($"Has obtenido: {usableItem.GetName()}", 4f);
            inventory.Add(usableItem);
            canvasManager.AddItem(usableItem, (inventory.Count).ToString(), usableItem.Energy());

            // Cambiar la capa del objeto y de todos sus hijos a "Objects"
            if (usableItem is MonoBehaviour itemObject)
            {
                ChangeLayerRecursively(itemObject.gameObject, LayerMask.NameToLayer("Objects"));
            }
        }
        else
        {
            ShowMessage("Inventario lleno", 4f);
        }
    }

    // Función recursiva para cambiar la capa de un objeto y todos sus hijos
    private void ChangeLayerRecursively(GameObject obj, int layer)
    {
        obj.layer = layer;
        foreach (Transform child in obj.transform)
        {
            ChangeLayerRecursively(child.gameObject, layer);
        }
    }



    public void ShowMessage(string message, float duration)
    {
        if (fadeTextInfoCoroutine != null)
        {
            StopCoroutine(fadeTextInfoCoroutine);
        }

        helpText.text = message;

        Color originalColor = helpText.color;
        helpText.color = new Color(originalColor.r, originalColor.g, originalColor.b, 1f);

        fadeTextInfoCoroutine = StartCoroutine(FadeOutText(duration));
    }

    private IEnumerator FadeOutText(float duration)
    {
        Color originalColor = helpText.color;
        float startAlpha = originalColor.a;

        for (float t = 0; t < duration; t += Time.deltaTime)
        {
            float normalizedTime = t / duration;
            helpText.color = new Color(originalColor.r, originalColor.g, originalColor.b, Mathf.Lerp(startAlpha, 0, normalizedTime));
            yield return null;
        }

        helpText.color = new Color(originalColor.r, originalColor.g, originalColor.b, 0);
        fadeTextInfoCoroutine = null;
    }


    public void RemoveItem(IUsable usableItem)
    {
        if (inventory.Contains(usableItem))
        {
            selectedObject = null;

            canvasManager.RemoveItem(inventory.IndexOf(usableItem));
            inventory.Remove(usableItem);

            if (usableItem.Energy())
            {
                ShowMessage($"Sin energia en {usableItem.GetName()}", 4.0f);
            }
        }
        else
        {
            //Debug.Log($"{usableItem.GetType().ToString()} no está en el inventario.");
        }
    }

    public void RemoveAllItemsRevive()
    {
        canvasManager.RemoveAllItems();
    }

    public void SelectObj(int index)
    {
        if (currentState != PlayerState.Hiding && currentState != PlayerState.Block && currentState != PlayerState.Dead)
        {
            if (index > 0 && index <= inventory.Count)
            {
                var newSelectedObject = inventory[index - 1];

                if (selectedObject != newSelectedObject)
                {
                    if (selectedObject != null)
                    {
                        selectedObject.DesActivate();
                    }

                    selectedObject = newSelectedObject;
                    selectedObject.Activate();
                }
                else
                {
                    selectedObject.DesActivate();
                    selectedObject = null;
                }
            }
            else
            {
                //Debug.Log("Invalid selection.");
            }
        }        
    }


    public void ActivateObj()
    {
        if (currentState != PlayerState.Hiding && currentState != PlayerState.Block && currentState != PlayerState.Dead)
        {
            if (selectedObject != null)
            {
                selectedObject.Use();
            }
            else
            {
                //Debug.Log("No object selected.");
            }
        }        
    }


    public void AddCoins(int amount)
    {
        coinsCount += amount;
        coinsCountText.text = coinsCount.ToString();
        ShowMessage($"Has recibido: {amount} monedas", 4f);

    }

    // Health management methods
    public void TakeDamage(float amount, Enemie enemie)
    {
        if (currentState == PlayerState.Dead) return;
        currentHealth = Mathf.Clamp(currentHealth - amount, 0.0f, maxHealth);
        UpdateHealthSlider(currentHealth);
        healthText.text = currentHealth.ToString();
        if (currentHealth <= 0) Die(enemie);
    }

    public void Heal(float amount)
    {
        if (currentState == PlayerState.Dead) return;
        currentHealth = Mathf.Clamp(currentHealth + amount, 0.0f, maxHealth);
        //UpdateHealthSlider(currentHealth);
        //healthSlider.value = Mathf.RoundToInt(currentHealth);
        healthImage.fillAmount = Mathf.Clamp01(currentHealth / 100f); // Asegúrate de que el valor esté entre 0 y 1
        healthText.text = currentHealth.ToString();
        ShowMessage("Te has curado", 4f);

    }

    public void ExtraHeal(float amount)
    {
        if (currentState == PlayerState.Dead) return;
        maxHealth += amount;
        currentHealth = maxHealth;
        //UpdateHealthSlider(currentHealth);
        //healthSlider.value = Mathf.RoundToInt(currentHealth);
        healthImage.fillAmount = Mathf.Clamp01(currentHealth / 100f); // Asegúrate de que el valor esté entre 0 y 1
        healthText.text = currentHealth.ToString();
        ShowMessage("Has aumentado tu vida maxima", 4f);

    }

    public void Die(Enemie enemie)
    {
        ChangePlayerState(PlayerState.Dead);
        currentHealth = 0;
        UpdateHealthSlider(currentHealth);
        healthText.text = currentHealth.ToString();
        DetachCamera();
        gameloopManager.PlayerEndGameDead(enemie);
        //Debug.Log("Enemie:" + enemie.enemyName);
    }

    public void InstaDie()
    {
        ResumeGame();
        ChangePlayerState(PlayerState.Dead);
        currentHealth = 0;
        UpdateHealthSlider(currentHealth);
        healthText.text = currentHealth.ToString();
        DetachCamera();
        gameloopManager.PlayerEndGameRestart();
    }


    private void UpdateHealthSlider(float value)
    {
        healthImage.fillAmount = Mathf.Clamp01(value / 100f); // Asegúrate de que el valor esté entre 0 y 1

        // Obtener el color actual de la imagen
        Color currentColor = damageIndicator.color;

        // Aumentar el alpha sin superar 1
        float newAlpha = Mathf.Min(currentColor.a + maxAlphaIncrease, 1f);
        damageIndicator.color = new Color(currentColor.r, currentColor.g, currentColor.b, newAlpha);

        // Reiniciar la corrutina para desvanecer el efecto
        if (fadeDamageIndicatorCoroutine != null)
            StopCoroutine(fadeDamageIndicatorCoroutine);

        fadeDamageIndicatorCoroutine = StartCoroutine(FadeOutDamageEffect());
    }

    private IEnumerator FadeOutDamageEffect()
    {
        yield return new WaitForSeconds(0.2f); // Mantener el alpha por 0.2 segundos

        float elapsedTime = 0f;
        Color startColor = damageIndicator.color;
        float startAlpha = startColor.a;

        while (elapsedTime < fadeDuration)
        {
            float newAlpha = Mathf.Lerp(startAlpha, 0f, elapsedTime / fadeDuration);
            damageIndicator.color = new Color(startColor.r, startColor.g, startColor.b, newAlpha);
            elapsedTime += Time.deltaTime;
            yield return null;
        }

        // Asegurar que el alpha llegue a 0 al final
        damageIndicator.color = new Color(startColor.r, startColor.g, startColor.b, 0f);
    }




    public void KillInstantly(Enemie enemie) => Die(enemie);
    //public float GetHealth() => currentHealth;


    public void DetachCamera()
    {
        if (playerCamera != null)
        {
            playerCamera.transform.parent = null;
            BoxCollider bc = playerCamera.gameObject.AddComponent<BoxCollider>();
            Rigidbody rb = playerCamera.gameObject.AddComponent<Rigidbody>();
            rb.useGravity = true;
            rb.constraints = RigidbodyConstraints.FreezeRotation;
        }
    }


    // State transition and camera handling
    private void ChangePlayerState(PlayerState newState)
    {
        currentState = newState;
        OnPlayerStateChanged(currentState);


        if (currentState != newState)
        {
        }
    }

    public void OnPlayerStateChanged(PlayerState newState)
    {
        if (stateSprites.TryGetValue(newState, out Sprite newSprite))
        {
            StateImage.sprite = newSprite;
            StateImage.gameObject.SetActive(true); // Asegurar que la imagen se vea
        }
        else
        {
            StateImage.gameObject.SetActive(false); // Ocultar la imagen
        }
    }


    public void StartAlertEnemy()
    {
        StartCoroutine(FadeAlertCoroutine(RepetitionAlert, MaxDurationAlert));
    }

    private IEnumerator FadeAlertCoroutine(int maxRepeats, float duration)
    {
        for (int i = 0; i < maxRepeats; i++)
        {
            yield return StartCoroutine(FadeAlpha(0f, 1f, duration / 2));
            yield return StartCoroutine(FadeAlpha(1f, 0f, duration / 2));
        }
    }

    private IEnumerator FadeAlpha(float startAlpha, float endAlpha, float duration)
    {
        float elapsed = 0f;
        Color color = AlertImage.color;

        while (elapsed < duration)
        {
            elapsed += Time.deltaTime;
            color.a = Mathf.Lerp(startAlpha, endAlpha, elapsed / duration);
            AlertImage.color = color;
            yield return null;
        }

        color.a = endAlpha;
        AlertImage.color = color;
    }

    private void Look()
    {
        targetRotation.x += lookInput.x * mouseSensitivity;
        targetRotation.y -= lookInput.y * mouseSensitivity;
        targetRotation.y = Mathf.Clamp(targetRotation.y, minVerticalAngle, maxVerticalAngle);

        currentRotation = Vector2.SmoothDamp(currentRotation, targetRotation, ref rotationVelocity, rotationSmoothness);

        transform.rotation = Quaternion.Euler(0f, currentRotation.x, 0f);
        playerCamera.transform.localRotation = Quaternion.Euler(currentRotation.y, 0f, 0f);

    }


    private void RotatePlayer()
    {
        Quaternion cameraRotation = playerCamera.transform.rotation;
        transform.rotation = Quaternion.Euler(0f, cameraRotation.eulerAngles.y, 0f);
    }


    private void OnDrawGizmos()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(gameObject.transform.position, playerRadius);
        
    }
}
